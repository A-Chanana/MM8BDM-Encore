#library "ENCPORT"
#include "zcommon.acs"


// [A-Chan] Sets a prop to its activate state
script "Encore_ActivateProp" (int tid)
{
SetActorState(tid,"Activate",true);
}


// [A-Chan] Script for clicky lifts
script "Encore_ClickyLift" (int Sector, int Height, int Speed)
{
if(CheckInventory("Once")>0){terminate;}
GiveInventory("Once",1);

int startheight = GetSectorFloorZ(sector,0,0);
//printbold(s:"startheight: ",i:startheight);

Floor_MoveToValue(sector,100,height);
while(GetSectorFloorZ(sector,0,0) < height<<16){
	PlaySound(0,"misc/door");
	delay(2);
	}
Delay(35*3);

Floor_MoveToValue(sector,100,startheight>>16);
while(GetSectorFloorZ(sector,0,0) > startheight){
	//printbold(s:"height: ",i:GetSectorFloorZ(sector,0,0));
	PlaySound(0,"misc/door");
	delay(2);
	}
Delay(35);

TakeInventory("Once",9);
}


// [A-Chan] Script for speed panels
#DEFINE ENC_MAXSPEEDPANELS 3
str enc_speedpanels[ENC_MAXSPEEDPANELS] = 
{
"ETICONV","CLKSTM","CLKSTM1"
};

Script "encore_speedPanel" (void)
{
if(CheckInventory("SpeedyFloorPowerup")>0){terminate;}
GiveInventory("SpeedyFloorPowerup",1);
GiveInventory("SpeedyFloorParticle_P",1);

while(CheckInventory("SpeedyFloorPowerup")>0){
	if(GetActorZ(0)>GetActorFloorZ(0) || !checkSpeedPanel()){
		TakeInventory("SpeedyFloorPowerup",9);
		terminate;
		}
    Delay(5);
    }
}

function bool checkSpeedPanel(void){
	for(int i; i < ENC_MAXSPEEDPANELS; i++){
		if(CheckActorFloorTexture(0,enc_speedpanels[i]) == true){
			return true;
			}
		}
	return false;
}


// [A-Chan] Script for jump sectors
#DEFINE ENC_MAXJUMPSECTORS 2
str enc_jumpsectors[ENC_MAXJUMPSECTORS] = 
{
"ESAFLR07","EJEWFLR8"
};

Script "encore_jumpSector" (void)
{
if(CheckInventory("WaveBubbleFlag")>0){terminate;}
GiveInventory("WaveBubbleFlag",1);

while(checkJumpSector() && GetActorProperty(0,APROP_Health)>0){
	GiveInventory("JewelPowerups_P",1);
	delay(1);
	}

TakeInventory("WaveBubbleFlag",1);
}

function bool checkJumpSector(void){
	for(int i; i < ENC_MAXJUMPSECTORS; i++){
		if(CheckActorFloorTexture(0,enc_jumpsectors[i]) == true){
			return true;
			}
		}
	return false;
}

// [A-Chan] Had to copy this for v6a compat, sorry!
Script "encore_checkDistance" (int Distance)
{
int ReturnThis=0;
For(int i = 0; i < 64; i++)
	{
	If(PlayerInGame(i) && i != PlayerNumber())
		{
		If(xyzdistance(ActivatorTID(), i+1000) < Distance){ReturnThis=1;break;}
		}
	}
SetResultValue(ReturnThis);
}

function int xyzDistance (int tid1, int tid2)
{
	int x, y, z, d;
	x = GetActorX(tid1) - GetActorX(tid2);
	y = GetActorY(tid1) - GetActorY(tid2);
	z = GetActorZ(tid1) - GetActorZ(tid2);
	d = VectorLength(VectorLength(x, y), z) >> 16;
	return d;
}

Script "encore_complexVoxelCheck" (void) CLIENTSIDE
{
if(GetUserCVar(ConsolePlayerNumber(),"enc_complexvoxels")){SetActorState(0,"ComplexVoxelState",1);}
}