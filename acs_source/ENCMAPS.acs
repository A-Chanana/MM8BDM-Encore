#library "ENCPORT"
#include "zcommon.acs"


// [A-Chan] Sets a prop to its activate state
script "Encore_ActivateProp" (int tid)
{
int activator = ActivatorTID();
SetActivator(tid);
SetPointer(AAPTR_Target,activator);
SetActorState(tid,"Activate",true);
}


// [A-Chan] Script for clicky lifts
script "Encore_ClickyLift" (int Sector, int Height, int Speed)
{
if(CheckInventory("Once")>0){terminate;}
GiveInventory("Once",1);

int startheight = GetSectorFloorZ(sector,0,0);
//printbold(s:"startheight: ",i:startheight);

Floor_MoveToValue(sector,100,height);
while(GetSectorFloorZ(sector,0,0) < height<<16){
	PlaySound(0,"misc/gutslift");
	delay(2);
	}
Delay(35*3);

Floor_MoveToValue(sector,100,startheight>>16);
while(GetSectorFloorZ(sector,0,0) > startheight){
	//printbold(s:"height: ",i:GetSectorFloorZ(sector,0,0));
	PlaySound(0,"misc/gutslift");
	delay(2);
	}
Delay(35);

TakeInventory("Once",9);
}


// [A-Chan] Script for speed panels
#DEFINE ENC_MAXSPEEDPANELS 3
str enc_speedpanels[ENC_MAXSPEEDPANELS] = 
{
"ETICONV","CLKSTM","CLKSTM1"
};

Script "Encore_SpeedPanel" (void)
{
if(CheckInventory("SpeedyFloorPowerup")>0){terminate;}
GiveInventory("SpeedyFloorPowerup",1);
GiveInventory("SpeedyFloorParticle_P",1);

while(CheckInventory("SpeedyFloorPowerup")>0){
	if(GetActorZ(0)>GetActorFloorZ(0) || !checkSpeedPanel()){
		TakeInventory("SpeedyFloorPowerup",9);
		terminate;
		}
    Delay(5);
    }
}

function bool checkSpeedPanel(void){
	for(int i; i < ENC_MAXSPEEDPANELS; i++){
		if(CheckActorFloorTexture(0,enc_speedpanels[i]) == true){
			return true;
			}
		}
	return false;
}


// [A-Chan] Script for jump sectors
#DEFINE ENC_MAXJUMPSECTORS 2
str enc_jumpsectors[ENC_MAXJUMPSECTORS] = 
{
"ESAFLR07","EJEWFLR8"
};

Script "Encore_JumpSector" (void)
{
if(CheckInventory("WaveBubbleFlag")>0){terminate;}
GiveInventory("WaveBubbleFlag",1);

while(checkJumpSector() && GetActorProperty(0,APROP_Health)>0){
	GiveInventory("JewelPowerups_P",1);
	delay(1);
	}

TakeInventory("WaveBubbleFlag",1);
}

function bool checkJumpSector(void){
	for(int i; i < ENC_MAXJUMPSECTORS; i++){
		if(CheckActorFloorTexture(0,enc_jumpsectors[i]) == true){
			return true;
			}
		}
	return false;
}


// [A-Chan] Script for glue conveyors
Script "Encore_GlueConveyor" (int speed, int type)
{
int Angle = GetActorAngle(0) >> 8;
//PrintBold(s:"activated by tid ",i:ACS_NamedExecuteWithResult("core_gettarget"));
SetActivator(ACS_NamedExecuteWithResult("core_gettarget"));

if(CheckInventory("StickyCeilingDelay")){terminate;}
int height = GetActorProperty(0,APROP_Height)+5.0;

GiveInventory("StickyCeilingDelay",1);
ACS_NamedExecuteAlways("core_flyplayer",0,0,1);
ACS_NamedExecuteAlways("core_stopplayer",0,0,1);
Delay(1);

Until(ACS_NamedExecuteWithResult("Encore_JumpCheck")){
	ThrustThingZ(0,5,0,0);
	Thing_Stop(0);
	ThrustThing(angle,speed,0,0);
	Delay(1);
	
	if(GetActorZ(0) < GetActorCeilingZ(0)-height){
		TakeInventory("StickyCeilingDelay",1);
		break;
		}
	}

ACS_NamedExecuteAlways("core_flyplayer",0,0,0);
ACS_NamedExecuteAlways("core_stopplayer",0,0,0);
Delay(1);

if(CheckInventory("StickyCeilingDelay")>0){ThrustThingZ(0,60,1,1);}
Delay(10);
TakeInventory("StickyCeilingDelay",1);
}


// [A-Chan] Had to copy this for v6a compat, sorry!
Script "Encore_CheckDistance" (int Distance)
{
int ReturnThis=0;
For(int i = 0; i < 64; i++)
	{
	If(PlayerInGame(i) && i != PlayerNumber())
		{
		If(xyzdistance(ActivatorTID(), i+1000) < Distance){ReturnThis=1;break;}
		}
	}
SetResultValue(ReturnThis);
}

function int xyzDistance (int tid1, int tid2)
{
	int x, y, z, d;
	x = GetActorX(tid1) - GetActorX(tid2);
	y = GetActorY(tid1) - GetActorY(tid2);
	z = GetActorZ(tid1) - GetActorZ(tid2);
	d = VectorLength(VectorLength(x, y), z) >> 16;
	return d;
}


Script "Encore_ComplexVoxelCheck" (void) CLIENTSIDE
{
if(GetUserCVar(ConsolePlayerNumber(),"enc_complexvoxels")){SetActorState(0,"ComplexVoxelState",1);}
}


// Returns true if the activator is pressing jump
Script "Encore_JumpCheck" (void)
{
	SetResultValue((GetPlayerInput(-1, INPUT_BUTTONS) & BT_JUMP)>0);
}

#LIBDEFINE SECTOR_LOWEST    -32768.0
#LIBDEFINE SECTOR_HIGHEST   32768.0
#LIBDEFINE GLOBAL_TIMEJUICE_TID -9999
#LIBDEFINE MAX_TIMEJUICE_GLOBAL_LIMIT 128
int MAX_TIMEJUICE_GLOBAL = 0;
int TimeJuiceSectors[MAX_TIMEJUICE_GLOBAL_LIMIT];

function int findTimeJuiceByTag(int tag)
{
    int res = -1;
	for(int i = 0; i < MAX_TIMEJUICE_GLOBAL && res == -1; i++)
    {
        if(tag == getTimeJuiceTag(i)) {
            res = i;
        }
    }
    return res;
}
function bool isZPosInTimeJuiceTag(int tag, int zPos)
{
    switch(GetUserVariable(tag, "user_direction")) {
        default: case 0: return zPos < GetActorZ(tag); // TimeJuice builds down
        case 1: return zPos >= GetActorZ(tag); // TimeJuice builds up
        case 2: return zPos < GetActorCeilingZ(tag) && zPos >= GetActorFloorZ(tag); // TimeJuice fills sector
    }
    return false;
}
function int getTimeJuiceTopZ(int tag) 
{
    switch(GetUserVariable(tag, "user_direction")) {
        default: case 0: return GetActorZ(tag); // TimeJuice builds down
        case 1: return SECTOR_HIGHEST; // TimeJuice builds up
        case 2: return GetActorCeilingZ(tag); // TimeJuice fills sector
    }
    return SECTOR_HIGHEST;
}
function int getTimeJuiceBottomZ(int tag) 
{
    switch(GetUserVariable(tag, "user_direction")) {
        default: case 0: return SECTOR_LOWEST; // TimeJuice builds down
        case 1: return GetActorZ(tag); // TimeJuice builds up
        case 2: return GetActorFloorZ(tag); // TimeJuice fills sector
    }
    return SECTOR_LOWEST;
}
function int findActorTimeJuice(int tid)
{
    if(tid == 0)
        return 0;
    if(ThingCountName("EncoreTimeWater", GLOBAL_TIMEJUICE_TID))
        return GLOBAL_TIMEJUICE_TID;
    for(int i = 0; i < MAX_TIMEJUICE_GLOBAL; i++)
    {
        if(ThingCountSector(T_NONE, tid, getTimeJuiceTag(i)) == 1)
        {
            return getTimeJuiceTag(i);
        }
    }
    return 0;
}

function int getTimeJuiceTag(int idx) { return TimeJuiceSectors[idx]; }

function void setTimeJuiceTag(int idx, int val) { TimeJuiceSectors[idx] = val; }

script "encore_addtimejuice" (void)
{
	// Activate Global Mode (I can't think of a cool way to do it)
	if(ActivatorTID()==0){
        Thing_ChangeTID(0, GLOBAL_TIMEJUICE_TID);
        terminate;
	}

    if(MAX_TIMEJUICE_GLOBAL < MAX_TIMEJUICE_GLOBAL_LIMIT) {
		setTimeJuiceTag(MAX_TIMEJUICE_GLOBAL, ActivatorTID());
        MAX_TIMEJUICE_GLOBAL++;
	} else {
        printbold(s:"Limit too low, need more time juice slots");
    }
}

script "encore_timejuice" ENTER
{
    int feetInTimeJuice = false;
    int eyesInTimeJuice = false;
    int oldFeetInTimeJuice = false;
    int oldEyesInTimeJuice = false;
	int splashDelay = 0;
	int maxsplashdelay = 20;

    Delay(5);
    if(ThingCountName("EncoreTimeWater",0)==0){terminate;}
    while(GetActorProperty(ActivatorTID(),APROP_HEALTH)>0) {
 
        int eyeDiff = GetActorProperty(0, APROP_ViewHeight);
        int feetZ = GetActorZ(0);
        int eyeZ = GetActorZ(0)+eyeDiff;
        int tid = ActivatorTID();
        int TimeJuiceBase = 0.0;
        int TimeJuiceTop = 0.0;
        int TimeJuiceSector = 0;
 
        // Determine which TimeJuice sector the player is in (if any)
        TimeJuiceSector = findActorTimeJuice(tid);
 
        // [Russ] if player is in TimeJuice sector, give them physics based on their height in the sector,
        // if they're within the defined height of the TimeJuice, give them physics!
        if(TimeJuiceSector != 0)
        {
            feetInTimeJuice = isZPosInTimeJuiceTag(TimeJuiceSector, feetZ);
            eyesInTimeJuice = isZPosInTimeJuiceTag(TimeJuiceSector, eyeZ);
        }
        else
        {
            feetInTimeJuice = false;
            eyesInTimeJuice = false;
        }
 
        if(feetInTimeJuice != oldFeetInTimeJuice || eyesInTimeJuice != oldEyesInTimeJuice)
        {
            if(feetInTimeJuice || eyesInTimeJuice) {        
				GiveInventory("SpeedyFloorPowerupJuice", 1);
				//print(s:"Time Juice given");
            } else {
				TakeInventory("SpeedyFloorPowerupJuice", 1);
				//print(s:"Time Juice taken");
			}
 
            if(feetInTimeJuice) {
                GiveInventory("HasFeetInTimeJuice", 1);
            } else {
                TakeInventory("HasFeetInTimeJuice", 999);
            }
 
            if(eyesInTimeJuice) {
                GiveInventory("IsUnderTimeJuice", 1);
            } else {
                TakeInventory("IsUnderTimeJuice", 999);
            }
			
			if(splashDelay <= 0)
            {
                bool entering = false;
 
                if(eyesInTimeJuice != oldEyesInTimeJuice && feetInTimeJuice != oldFeetInTimeJuice)
                {
                    entering = eyesInTimeJuice || feetInTimeJuice;
                    splashDelay = maxsplashdelay;
                } else {
                    if(eyesInTimeJuice != oldEyesInTimeJuice) {
                        entering = eyesInTimeJuice;
                        if(feetInTimeJuice) {
                            splashDelay = maxsplashdelay;
                        } else {
                            splashDelay = maxsplashdelay;
                        }
                    } else if(feetInTimeJuice != oldFeetInTimeJuice) {
                        entering = feetInTimeJuice;
                        if(eyesInTimeJuice) {
                            splashDelay = maxsplashdelay;
                        } else {
                            splashDelay = maxsplashdelay;
                        }
                    }
                }
                if(splashDelay == 0)
                    splashDelay = maxsplashdelay;
            }
         
            oldFeetInTimeJuice = feetInTimeJuice;
            oldEyesInTimeJuice = eyesInTimeJuice;
        }
		
		if(splashDelay > 0){splashDelay--;}
		Delay(1);
    }
}